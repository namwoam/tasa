From 6104175c0a7784c5cf333e2d9566db32e0fe676a Mon Sep 17 00:00:00 2001
From: Andreas Larsson <andreas@gaisler.com>
Date: Wed, 13 Oct 2021 10:50:14 +0200
Subject: [PATCH 25/32] sparc32,leon: Support futex atomic operations on SMP
 using CAS

This this needed for priority inheritance support. Previously futex
atomic operations only worked for !SMP. With CAS enabled, now CAS is
used regardless of being SMP or not.

Signed-off-by: Andreas Larsson <andreas@gaisler.com>
---
 arch/sparc/Kconfig                |   1 +
 arch/sparc/include/asm/futex_32.h | 107 +++++++++++++++++++++++++++++-
 2 files changed, 107 insertions(+), 1 deletion(-)

diff --git a/arch/sparc/Kconfig b/arch/sparc/Kconfig
index c15672afbd50..a9d618c6f6c1 100644
--- a/arch/sparc/Kconfig
+++ b/arch/sparc/Kconfig
@@ -411,6 +411,7 @@ config SPARC_LEON_FIX_TN0018
 
 config SPARC_LEON_CAS
 	bool "Use Compare and Swap"
+	select HAVE_FUTEX_CMPXCHG if FUTEX
 	default y
 	help
 	  If you say Y here the kernel will use the CASA instruction. Enable
diff --git a/arch/sparc/include/asm/futex_32.h b/arch/sparc/include/asm/futex_32.h
index 6a332a9f099c..992a1f0e8f1c 100644
--- a/arch/sparc/include/asm/futex_32.h
+++ b/arch/sparc/include/asm/futex_32.h
@@ -1,6 +1,111 @@
 #ifndef _ASM_FUTEX_H
 #define _ASM_FUTEX_H
 
-#include <asm-generic/futex.h>
+#ifdef CONFIG_SPARC_LEON_CAS
+
+#include <linux/futex.h>
+#include <linux/uaccess.h>
+#include <asm/errno.h>
+
+#define __futex_cas_op(insn, ret, oldval, uaddr, oparg)	\
+	__asm__ __volatile__(				\
+	"\n1:	lda	[%3] 0xa, %2\n"		\
+	"	" insn "\n"				\
+	"2:	casa	[%3] 0xa, %2, %1\n"		\
+	"	cmp	%2, %1\n"			\
+	"	bne 1b\n"			\
+	"	 mov	0, %0\n"			\
+	"3:\n"						\
+	"	.section .fixup,#alloc,#execinstr\n"	\
+	"	.align	4\n"				\
+	"4:	sethi	%%hi(3b), %0\n"			\
+	"	jmpl	%0 + %%lo(3b), %%g0\n"		\
+	"	 mov	%5, %0\n"			\
+	"	.previous\n"				\
+	"	.section __ex_table,\"a\"\n"		\
+	"	.align	4\n"				\
+	"	.word	1b, 4b\n"			\
+	"	.word	2b, 4b\n"			\
+	"	.previous\n"				\
+	: "=&r" (ret), "=&r" (oldval), "=&r" (tem)	\
+	: "r" (uaddr), "r" (oparg), "i" (-EFAULT)	\
+	: "memory")
+
+static inline int arch_futex_atomic_op_inuser(int op, int oparg, int *oval,
+		u32 __user *uaddr)
+{
+	int oldval = 0, ret, tem;
+
+	if (unlikely((((unsigned long) uaddr) & 0x3UL)))
+		return -EINVAL;
+
+	/*
+	 * Not all LEONs gets traps as if in user mode when using ASI 0xa in
+	 * supervisor mode, so check explicitly.
+	 */
+	if (unlikely(!access_ok(uaddr, 4)))
+		return -EFAULT;
+
+	switch (op) {
+	case FUTEX_OP_SET:
+		__futex_cas_op("mov\t%4, %1", ret, oldval, uaddr, oparg);
+		break;
+	case FUTEX_OP_ADD:
+		__futex_cas_op("add\t%2, %4, %1", ret, oldval, uaddr, oparg);
+		break;
+	case FUTEX_OP_OR:
+		__futex_cas_op("or\t%2, %4, %1", ret, oldval, uaddr, oparg);
+		break;
+	case FUTEX_OP_ANDN:
+		__futex_cas_op("andn\t%2, %4, %1", ret, oldval, uaddr, oparg);
+		break;
+	case FUTEX_OP_XOR:
+		__futex_cas_op("xor\t%2, %4, %1", ret, oldval, uaddr, oparg);
+		break;
+	default:
+		ret = -ENOSYS;
+	}
 
+	if (!ret)
+		*oval = oldval;
+
+	return ret;
+}
+
+static inline int
+futex_atomic_cmpxchg_inatomic(u32 *uval, u32 __user *uaddr,
+			      u32 oldval, u32 newval)
+{
+	int ret = 0;
+
+	/*
+	 * Not all LEONs gets traps as if in user mode when using ASI 0xa in
+	 * supervisor mode, so check explicitly.
+	 */
+	if (unlikely(!access_ok(uaddr, 4)))
+		return -EFAULT;
+
+	__asm__ __volatile__(
+	"\n1:	casa	[%4] 0xb, %3, %1\n"
+	"2:\n"
+	"	.section .fixup,#alloc,#execinstr\n"
+	"	.align	4\n"
+	"3:	sethi	%%hi(2b), %0\n"
+	"	jmpl	%0 + %%lo(2b), %%g0\n"
+	"	mov	%5, %0\n"
+	"	.previous\n"
+	"	.section __ex_table,\"a\"\n"
+	"	.align	4\n"
+	"	.word	1b, 3b\n"
+	"	.previous\n"
+	: "+r" (ret), "=r" (newval)
+	: "1" (newval), "r" (oldval), "r" (uaddr), "i" (-EFAULT)
+	: "memory");
+
+	*uval = newval;
+	return ret;
+}
+#else /* CONFIG_SPARC_LEON_CAS */
+#include <asm-generic/futex.h>
+#endif
 #endif
-- 
2.34.1

